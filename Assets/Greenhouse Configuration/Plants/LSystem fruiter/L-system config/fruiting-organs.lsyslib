#symbols /\&^+-!F$`@HM
#global /\&^+-!F$`@HM
#matches H

#symbols ra
#matches r
#include diffusion (Node->r) (Amount->a)

#symbols i
#include organIdentity (Identifier->i)


## variables controlled by genes
## ranges from 0 to 2. 0 is least ripe, 2 is most ripe.
#define fruitColorIndex 1
#define flowerColorInnerIndex 1
#define flowerColorOuterIndex 1

#define flowerAge 7

#define flowerStalkLength 7

## composites
#define flowerMeshIndex (flowerColorOuterIndex + flowerColorInnerIndex * 3)
## V is a flowering bud
#export FlowerBud V
#symbols V
#matches V
#immature V

V -> V(0, flowerStalkLength)

 r(a, water, c, glucose, d) < V(progress, x) : progress < 1 && x >  0 && useGlucose -> a(-glucose/2, -glucose/2)V(progress + glucose/2, x)
 r(a, water, c, glucose, d) < V(progress, x) : progress < 1 && x >  0 &&   useWater -> a(-  water/2, -  water/2)V(progress +   water/2, x)
 r(a, water, c, glucose, d) < V(progress, x) : progress >=1 && x >  0 -> $(0.1)FV(progress - 1, x - 1)
 
P(flowerFailureChance)     | Hr(a, water, c, glucose, d) < V(progress, x) -> i(0)B(0)
P(1 - flowerFailureChance) | Hr(a, water, c, glucose, d) < V(progress, x) -> i(0)C(0)[K(flowerMeshIndex, 1)A(1)]

#define fruitBendFactor 0.05
## C is a fruiting controller. transitions to a fruit after waiting
#symbols C
#matches C
r(a, water, c, glucose, d) < C(x) > K(e, age) : x <= 0 && water > 2 && glucose > 2 && age >= flowerAge -> C(1)[D(fruitColorIndex, 1)M]

#define fruitSize 5
## D is a fruiting body
#export FruitOrgan D
#symbols D
#matches D
r(a, water, c, glucose, d)C(bit) < D(y, x)     : x <  fruitSize && useGlucose -> a(-glucose/2, -glucose/2)D(y, x + glucose/2)
r(a, water, c, glucose, d)C(bit) < D(y, x)     : x <  fruitSize && useWater   -> a(-  water/2, -  water/2)D(y, x +   water/2)

$(a) > C(bit)D(y, x) -> $(x * fruitBendFactor)

## M is an immaturaty marker
## remove the immaturaty symbol once the fruit is fully grown
                                   D(y, x) < M : x >= fruitSize -> 

## K is a flower
#export Flower K
#symbols K
#matches K
#immature K
r(a, water, c, glucose, d)C(bit) < K(y, x) : x <  flowerAge &&   useWater -> a(-  water/2, -  water/2)K(y, x +   water/2)
r(a, water, c, glucose, d)C(bit) < K(y, x) : x <  flowerAge && useGlucose -> a(-glucose/2, -glucose/2)K(y, x + glucose/2)
                          C(bit) < K(y, x) : x >= flowerAge && bit >= 1 ->

#define bombCost 20


#define useGlucoseP water > glucose && glucose > 0.1 && (1 - progress) < (glucose/2)/bombCost
#define useWaterP glucose >= water && water > 0.1 && (1 - progress) < (water/2)/bombCost
#define useProgress glucose >= water && water > 0.1

## B is a Bomb Launcher, b is the launched bomb
#export BombLauncher B
#export Bomb b
#symbols Bb
r(a, water, c, glucose, d) < B(progress) : progress < 1 &&   useWater && (1-progress) >= (  water/2)/bombCost -> a(-  water/2, -  water/2)B(progress + (  water/2)/bombCost)
r(a, water, c, glucose, d) < B(progress) : progress < 1 && useGlucose && (1-progress) >= (glucose/2)/bombCost -> a(-glucose/2, -glucose/2)B(progress + (glucose/2)/bombCost)

r(a, water, c, glucose, d) < B(progress) : progress < 1 &&   useWater && (1-progress) <  (  water/2)/bombCost -> a(-(1-progress), -(1-progress))B(1)
r(a, water, c, glucose, d) < B(progress) : progress < 1 && useGlucose && (1-progress) <  (glucose/2)/bombCost -> a(-(1-progress), -(1-progress))B(1)

r(a, water, c, glucose, d) < B(progress) : progress >= 1 -> bB(0)
b -> 

## A is an anther
#export Anther A
#symbols A
#matches A
K(a, fAge) < A(x) : (hasAnther > 0) -> A(fAge * stamenSize)
A(x) ->

