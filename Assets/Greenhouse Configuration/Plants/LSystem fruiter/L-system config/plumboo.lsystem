#axiom r(0.1, 10, 1000, 20, 20)b(10)i(0)S(0)
#iterations 100000

#symbols /\&^+-!F$`@
#global /\&^+-!F$`@H
#symbols R

#symbols q
#include plumboo-controllers.lsyslib (LeafController->q)

#symbols i
#include organIdentity (Identifier->i)
#symbols s
#include sunlight (LightAmount->s)

#symbols ra
#matches r
#define diffusionStepsPerStep 10
#define independentDiffusionStep true
#include diffusion (Node->r) (Amount->a)
#define defaultMaxWater 1000
#define defaultMaxGlucose 20

## flags set based on the pollination state
#runtime hasAnther 1
#runtime isPollinated 0

## floating variable which adjusts the simulation speed
#runtime simSpeed 1

## composition definitions. define directives evaluate in-order, these directives rely on subsequent definitions to complete
#define petioleLeafAngularDist (270 / leavesPerPetiole)

## variables controlled by genes
#define primaryBranchInternodes 7
#define flowerFailureChance 0.25
#define stamenSize 0.6
## ranges from 1 to 10
#define kinkiness 2
## ranges from 1 to 5
#define leavesPerPetiole 5
#define internodeHeight 3
#define petioleStalkLength 3



#define primaryAngularSeparation 137


## variables defined for utility
#define shootHeight 5

#define useGlucose water > glucose && glucose > 0.1
#define useWater glucose >= water && water > 0.1

## S is the Shoot symbol
#symbols S
#matches S
#immature S
S(x) : x == 0 -> @FS(x + 1)[r(.1, 0, defaultMaxWater, 0, defaultMaxGlucose)qi(0)s(0)[&&leafOrgan][/(180)&&leafOrgan]]T(0, -shootHeight)
S(x) : x < shootHeight && x > 0-> FS(x+1)
S(x) : x == shootHeight -> r(0.1, 0, defaultMaxWater, 0, defaultMaxGlucose)

## b is the water producing root
#symbols b
b(x) -> a(x * simSpeed)b(x)

## T is a terminal bud
#symbols T
#matches T
#immature T
T(progress, x) : x < 0 -> T(progress, x + 1)

r(a, water, c, glucose, d) < T(progress, x) : x < primaryBranchInternodes && x >= 0 && progress <  1 && useGlucose -> a(-glucose/2, -glucose/2)T(progress + glucose/2, x)
r(a, water, c, glucose, d) < T(progress, x) : x < primaryBranchInternodes && x >= 0 && progress <  1 && useWater   -> a(-  water/2, -  water/2)T(progress +   water/2, x)
r(a, water, c, glucose, d) < T(progress, x) : x < primaryBranchInternodes && x >= 0 && progress >= 1 -> I(0, internodeHeight)[&(60)B][\(180)&(60)B]\(primaryAngularSeparation)r(.1, 0, defaultMaxWater, 0, defaultMaxGlucose)T(progress - 1, x + 1)

r(a, water, c, glucose, d) < T(progress, x) : x >= primaryBranchInternodes && progress <  2 && useWater   -> a(-glucose/2, -glucose/2)T(progress + glucose/2, x)
r(a, water, c, glucose, d) < T(progress, x) : x >= primaryBranchInternodes && progress <  2 && useGlucose -> a(-  water/2, -  water/2)T(progress +   water/2, x)
r(a, water, c, glucose, d) < T(progress, x) : x >= primaryBranchInternodes && progress >= 2 -> J(internodeHeight)



## Y is a a terminal bud of a flowering stalk
## #symbols Y
## #immature Y
## r(a, water, c, glucose, d) < Y(x) : x < primaryBranchInternodes && x >= 0 && water > 1 && glucose > 1 -> a(-1, -1)I(internodeHeight)r(.1, 0, defaultMaxWater, 0, defaultMaxGlucose)[&(60)N][\(180)&(60)N]\(primaryAngularSeparation)Y(x + 1)
## r(a, water, c, glucose, d) < Y(x) : x >= primaryBranchInternodes -> J(internodeHeight)


#include fruiting-organs.lsyslib (FlowerBud->V) (FruitOrgan->D) (Anther->A) (Flower->K)
#symbols VDKA

## B is a bud which will grow a leaf structure and also a flower
#symbols B
#matches B
B -> [r(.1, 0, defaultMaxWater, 0, defaultMaxGlucose)^(50)V]r(.1, 0, defaultMaxWater, 0, defaultMaxGlucose)I(0, petioleStalkLength)[r(.1, 0, defaultMaxWater, 0, defaultMaxGlucose)qi(0)s(0)petiole(leavesPerPetiole)]



## J is a signal which propigates from the apex, signaling flowering.
#symbols J
#matches J
#immature J
J(x) : x > 0 -> J(x - 1)
J(x) : x <= 0 -> J
J ->
## H is a signal which propigates upwards from internodes, signaling flowering
#symbols H
#matches H
H ->
 
## P is the petiole, x is number of leaves
#symbols P
#matches P
#define petiole( P(
petiole(x) : x >= 2 -> [O((x - 1) / 2, -petioleLeafAngularDist)][leafOrgan][O((x - 1) / 2, petioleLeafAngularDist)]
petiole(x) : x > 0 -> [leafOrgan]

## O is a symbol which fans leaves out
#symbols O
#matches O
r(a, water, b, glucose, c) < O(x, t) : x > 0 && water > 0.5 && glucose > 0.5 -> +(t)l(1, x/(leavesPerPetiole/2) * leafAge)O(x - 1, t)

## I is an internode, used to just build length of certain size
#symbols I
#matches I
r(a, water, b, glucose, c) < I(progress, x) : x > 0 && progress < 1 && useGlucose -> a(-glucose/2, -glucose/2)I(progress + glucose / 2, x)
r(a, water, b, glucose, c) < I(progress, x) : x > 0 && progress < 1 && useWater   -> a(-  water/2, -  water/2)I(progress +   water / 2, x)

I(progress, x) : x > 0 && progress >= 1 -> ~@FI(progress - 1, x - 1)
I(progress, x) > r(a, b, c, d, e)J         -> JI(progress, x)H


#define defaultBend 0.01
## ~ is a random kink
#symbols ~
P(1/5) | ~ -> $(defaultBend)
P(1/5) | ~ -> $(defaultBend)^(2 * kinkiness)
P(1/5) | ~ -> $(defaultBend)&(2 * kinkiness)
P(1/5) | ~ -> $(defaultBend)+(2 * kinkiness)
P(1/5) | ~ -> $(defaultBend)-(2 * kinkiness)

## organs

#define leafOrgan l(1, leafAge)
#define leafAge 3
## l is a leaf
#symbols l
r(a, water, b, glucose, c) < l(growth, maxSize) : growth < maxSize &&   useWater -> a(-  water/2, -  water/2)l(growth +   water/2, maxSize)
r(a, water, b, glucose, c) < l(growth, maxSize) : growth < maxSize && useGlucose -> a(-glucose/2, -glucose/2)l(growth + glucose/2, maxSize)