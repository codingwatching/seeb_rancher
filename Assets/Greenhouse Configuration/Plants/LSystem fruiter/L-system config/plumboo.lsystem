#axiom r(0.1, 20, 1000, 5, 20)dr(0.1, 20, 1000, 5, 20)Ri(0)S(0)
#iterations 100000

#symbols /\&^+-!F$`@
#global /\&^+-!F$`@H



#symbols qd
#include plumboo-controllers.lsyslib (LeafController->q) (DehydrationController->d)
#symbols i
#include organIdentity (Identifier->i)
#symbols s
#include sunlight (LightAmount->s)

#symbols n
#include autophagy (Necrose->n)

#symbols ra
#matches r
#define diffusionStepsPerStep 20
#define independentDiffusionStep true
#include diffusion (Node->r) (Amount->a)
#define defaultMaxWater 1000
#define defaultMaxGlucose 20


## glucose is used exlusively for new growth
## water is used by leaves to produce glucose with sunlight
## water is also used by organs (including leaves) to stay alive as maintenance


## flags set based on the pollination state
#runtime hasAnther 1
#runtime isPollinated 0

## floating variable which adjusts the simulation speed
#runtime simSpeed 1


## variables controlled by genes
#define primaryBranchInternodes 7
#define flowerFailureChance 0.25
#define stamenSize 0.6
## ranges from 1 to 10
#define kinkiness 2
## ranges from 1 to 5
#define leavesPerPetiole 5
#define internodeHeight 3
#define petioleStalkLength 3

#define primaryAngularSeparation 137


## variables defined for utility
#define shootHeight 5
#define segmentCost 0.5

## composition definitions.
#define petioleLeafAngularDist (270 / leavesPerPetiole)

#define useGlucose water > glucose && glucose > 0.1
#define useWater glucose >= water && water > 0.1

#define organSunlightDehydration (-8 * sunlight * simSpeed)
#define organFlatWaterUpkeep (-0.01 * simSpeed)
## minWaterForGrowth is used to limit any "structural" growth, such as adding a new resource node
##	as well as controlling when photosynthesis happens
##	It is a water-conserving measure, the plant protecting itself when it starts to dry out
#define minWaterForGrowth 5
#define waterIsPlentiful (water > minWaterForGrowth)
#define waterIsScarce (water <= minWaterForGrowth)
## when true, this part of the plant is considered to be dying/dead
#define waterStarved (water <= 0.1)


## S is the Shoot symbol
#symbols S
#matches S
#immature S
S(x) : x == 0 -> @FS(x + 1)[dr(.1, 0, defaultMaxWater, 0, defaultMaxGlucose)qi(0)s(0)[&&leafOrgan][/(180)&&leafOrgan]]i(0)T(0, -shootHeight)
S(x) : x < shootHeight && x > 0 -> FS(x+1)
S(x) : x == shootHeight -> dr(0.1, 0, defaultMaxWater, 0, defaultMaxGlucose)


## R is the root
#symbols R
R -> [i(0)+(180)~F~F~F~F~F~F~Fh(0)]

## g is the debugging water-producing signal
#symbols g
g(x) -> 

#include ../../shared-resource-controllers.lsyslib (RootWaterDiffuser->h)
#symbols h

## T is a terminal bud
#symbols T
#matches T
#immature T
T(progress, x) : x < 0 -> T(progress, x + 1)


r(a, water, c, glucose, d) < T(progress, x) : x < primaryBranchInternodes && x >= 0 && progress <  1 && glucose > 0.1 && waterIsPlentiful -> a(0, -glucose/2)T(progress + glucose/2, x)

r(a, water, c, glucose, d) < T(progress, x) : x < primaryBranchInternodes && x >= 0 && progress >= 1 && waterIsPlentiful -> I(0, internodeHeight)[&(60)B][\(180)&(60)B]\(primaryAngularSeparation)dr(.1, 0, defaultMaxWater, 0, defaultMaxGlucose)i(0)T(progress - 1, x + 1)

r(a, water, c, glucose, d) < T(progress, x) : x >= primaryBranchInternodes && progress <  2 && glucose > 0.1 && waterIsPlentiful -> a(0, -glucose/2)T(progress + glucose/2, x)
r(a, water, c, glucose, d) < T(progress, x) : x >= primaryBranchInternodes && progress >= 2 -> J(internodeHeight)


## Y is a a terminal bud of a flowering stalk
## #symbols Y
## #immature Y
## r(a, water, c, glucose, d) < Y(x) : x < primaryBranchInternodes && x >= 0 && water > 1 && glucose > 1 -> a(-1, -1)I(internodeHeight)r(.1, 0, defaultMaxWater, 0, defaultMaxGlucose)[&(60)N][\(180)&(60)N]\(primaryAngularSeparation)Y(x + 1)
## r(a, water, c, glucose, d) < Y(x) : x >= primaryBranchInternodes -> J(internodeHeight)


#include fruiting-organs.lsyslib (FlowerBud->V) (FruitOrgan->D) (Anther->A) (Flower->K) (BombLauncher->Z) (Bomb->z) (BombPlaceholder->x)
#symbols VDAKZzx

## B is a bud which will grow a leaf structure and also a flower
#symbols B
#matches B
B -> i(0)[dr(.1, 0, defaultMaxWater, 0, defaultMaxGlucose)^(50)i(0)V]dr(.1, 0, defaultMaxWater, 0, defaultMaxGlucose)I(0, petioleStalkLength)[dr(.1, 0, defaultMaxWater, 0, defaultMaxGlucose)qi(0)s(0)petiole(leavesPerPetiole)]


## J is a signal which propigates from the apex, signaling flowering.
#symbols J
#matches J
#immature J
J(x) : x > 0 -> J(x - 1)
J(x) : x <= 0 -> J
J ->
## H is a signal which propigates upwards from internodes, signaling flowering
#symbols H
#matches H
H ->
 
## P is the petiole, x is number of leaves
#symbols P
#matches P
#define petiole( P(
petiole(x) : x >= 2 -> [O((x - 1) / 2, -petioleLeafAngularDist)][leafOrgan][O((x - 1) / 2, petioleLeafAngularDist)]
petiole(x) : x > 0 -> [leafOrgan]

## O is a symbol which fans leaves out
#symbols O
#matches O
r(a, water, b, glucose, c) < O(x, t) : x > 0 && water > 0.5 && glucose > 0.5 -> +(t)l(upkeepWaterRange, 1, x/(leavesPerPetiole/2) * leafAge)O(x - 1, t)

## I is an internode, used to just build length of certain size
#symbols I
#matches I
r(a, water, b, glucose, c) < I(progress, x) : x > 0 && progress < segmentCost && glucose > 0.1 && waterIsPlentiful -> a(0, -glucose/2)I(progress + glucose / 2, x)

I(progress, x) : x > 0 && progress >= segmentCost -> ~@FI(progress - segmentCost, x - 1)
I(progress, x) > r(a, b, c, d, e)J         -> JI(progress, x)H


#define defaultBend 0.01
## ~ is a random kink
#symbols ~
P(1/5) | ~ -> $(defaultBend)
P(1/5) | ~ -> $(defaultBend)^(2 * kinkiness)
P(1/5) | ~ -> $(defaultBend)&(2 * kinkiness)
P(1/5) | ~ -> $(defaultBend)+(2 * kinkiness)
P(1/5) | ~ -> $(defaultBend)-(2 * kinkiness)

## organs

#define leafAge 3
#define upkeepWaterRange 10
#define leafMeshNum 4
#define leafHydration ((water / upkeepWaterRange)^0.5) * leafMeshNum
#define leafOrgan l(upkeepWaterRange, 1, leafAge)

## l is a leaf
#symbols l
r(a, water, b, glucose, c) < l(d, growth, maxSize) : growth < maxSize && glucose > 0.1 && waterIsPlentiful -> a(0, -glucose/2)l(leafHydration, growth + glucose/2, maxSize)
r(a, water, b, glucose, c) < l(d, growth, maxSize) -> l(leafHydration, growth, maxSize)