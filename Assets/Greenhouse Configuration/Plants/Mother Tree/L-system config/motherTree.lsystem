#axiom i(0)/(-50)@(1)qr(0.3, 0, 1000, 1, 20, 0, 100000)t(50)R(0)bwFFFF[pm(10)&(90)i(0)s(0)L(5)][+(35)f(0)r(.1, 0, 1000, 0, 20, 0, 10000)o(0)R(0)T(5)][-(35)f(0)r(.1, 0, 1000, 0, 20, 0, 10000)o(0)R(0)T(5)]
#iterations 3000

#symbols +-/\&^F$@!`
#matches !`


#define leafProbability 1

#define defaultMaxWater 1000
#define defaultMaxGlucose 20
#define defaultMaxVirility 10000

## floating variable which adjusts the simulation speed
#runtime simSpeed 1
#define perStepSunlightMultiplier 40
#define leafSunlightMultiplier perStepSunlightMultiplier * simSpeed
#define maxGlucoseFromLeaf 2.5

#define leafVirilityProduction 1
#define autophagicVirilityProduction .4



## flags set based on the pollination state
#runtime hasAnther 1
#runtime isPollinated 0

#symbols WQB


#symbols ra
#matches r
#define diffusionStepsPerStep 10
#define independentDiffusionStep true
#include diffusion (Node->r) (Amount->a)

#symbols i
#include organIdentity (Identifier->i)
#symbols s
#matches s
#include sunlight (LightAmount->s)

#symbols n
#include autophagy (Necrose->n)

#define useGlucose water > glucose && glucose > 0.1
#define useWater glucose >= water && water > 0.1

#include ../../shared-resource-controllers.lsyslib (RootWaterDiffuser->h)
#symbols h
#matches h
## w is the root
#symbols w
w -> [i(0)+(180)~F~F~F~F~F~F~Fh(0)]


## t is a tuber that releases glucose slowly
#symbols t
t(x) : x > 0 -> a(0, simSpeed)t(x - simSpeed)
t(x) : x <= 0 ->

#symbols TK
#matches TK
r(a, water, c, glucose, d, virility, e) < T(x) : water >= .1 && glucose >= .1 && x >  0 -> ~@(0.93)f(0)T(x - 1)

P(0.9) | r(a, water, c, glucose, d, virility, e) < T(x) : water >= .2 && glucose >= .2 && x <= 0 -> /(137)[\(180)&(90)l(0)][&(90)l(0)][+(35)f(0)r(.1, 0, defaultMaxWater, 0, defaultMaxGlucose, 0, defaultMaxVirility)o(0)R(0)T(5)][-(35)f(0)r(.1, 0, defaultMaxWater, 0, defaultMaxGlucose, virility * 2, defaultMaxVirility)o(0)R(0)T(5)]
P(0.1) | r(a, water, c, glucose, d, virility, e) < T(x) : water >= .2 && glucose >= .2 && x <= 0 -> f(0)k(0)

## 0.93^5 == .7 . roughly a 70% reduction per branch ends up with a pretty good looking branching reduction


## q is a symbol used to regulate the root's scale
#symbols q
#matches q
@(x) > qr(a, water, c, glucose, d, virility, e) -> @(virility / 25)

## L is a leaf. parameter is the size of the leaf, and also is is the health of the leaf which decreases when receiving a small amount of sunlight
## the leaf health decreases directly proportional the the difference between the actual sunlight and the min sunlight
#define leafMinSunlight 0.05
#define leafMaxHealth 20
#define leafCost 1
## l is a precursor to a leaf
#symbols lL
#matches L
P(leafProbability)     |     l -> l(0)
P(1 - leafProbability) |     l -> 
r(a, water, c, glucose, d, virility, e) < l(amt) : amt < leafCost && useGlucose -> a(-glucose/2, -glucose/2)l(amt + glucose/2)
r(a, water, c, glucose, d, virility, e) < l(amt) : amt < leafCost && useWater -> a(-water/2, -water/2)l(amt + water/2)
                                          l(amt) : amt >= leafCost -> pm(leafVirilityProduction)i(0)s(0)L(leafMaxHealth)
#define leafHealthWillDimishDueToSunlight (health >= leafMaxHealth && sunlight * perStepSunlightMultiplier - leafMinSunlight <= 0)
#define leafHealthAffectedBySunlight ((health > 0 && health < leafMaxHealth) || leafHealthWillDimishDueToSunlight)
#define leafCanProduceGlucose (water >= (sunlight * leafSunlightMultiplier / 2) && glucose <= maxGlucoseFromLeaf)
r(a, water, c, glucose, d, virility, e)s(sunlight) < L(health) :  leafCanProduceGlucose && leafHealthAffectedBySunlight                                                            -> a(-sunlight * leafSunlightMultiplier / 2, sunlight * leafSunlightMultiplier)L(health + (sunlight * perStepSunlightMultiplier - leafMinSunlight) * simSpeed)
r(a, water, c, glucose, d, virility, e)s(sunlight) < L(health) :  leafCanProduceGlucose && (health >= leafMaxHealth && sunlight * perStepSunlightMultiplier - leafMinSunlight > 0) -> a(-sunlight * leafSunlightMultiplier / 2, sunlight * leafSunlightMultiplier)L(health - 0.01)

r(a, water, c, glucose, d, virility, e)s(sunlight) < L(health) : !leafCanProduceGlucose && leafHealthAffectedBySunlight                                                            -> L(health + (sunlight * perStepSunlightMultiplier - leafMinSunlight) * simSpeed)

## r(a, water, c, glucose, d)s(sunlight) < L(health) : health <= 0                                                                                                                                                                                    -> 

## f is a precursor to a stem
#define stemCost 1
#symbols f
#matches f
r(a, water, c, glucose, d, virility, e) < f(amt) : amt < stemCost && useGlucose -> a(-glucose/2, -glucose/2)f(amt + glucose/2)
r(a, water, c, glucose, d, virility, e) < f(amt) : amt < stemCost && useWater -> a(-water/2, -water/2)f(amt + water/2)
										  f(amt) : amt >= stemCost -> F

## k is a precursor to a flower
#define flowerCost 1
#symbols k
r(a, water, c, glucose, d, virility, e) < k(amt) : amt < flowerCost && useGlucose -> a(-glucose/2, -glucose/2)k(amt + glucose/2)
r(a, water, c, glucose, d, virility, e) < k(amt) : amt < flowerCost && useWater -> a(-water/2, -water/2)k(amt + water/2)
										  k(amt) : amt >= flowerCost -> K



## R is the resource visualizer
#symbols R
## r(a, water, c, glucose, d, virility, e) < R(x) -> R(virility)
										  R(x) -> 

## ~ is a random kink
#symbols ~
P(1/5) | ~ ->
P(1/5) | ~ -> ^(10)
P(1/5) | ~ -> &(10)
P(1/5) | ~ -> +(10)
P(1/5) | ~ -> -(10)

## m is a life indicator. it produces a hormone from living, breathing branches
## b is a life root which consumes all of the life indicator hormone
#symbols mb
m(x) -> a(0, 0, x * simSpeed)m(x)

r(a, water, b, glucose, c, virility, d) < b -> a(0, 0, -virility * simSpeed / 2 )b



## p is a autophagic switch which waits for a leaf to become unhealthy, and then aborts it
#symbols p
p > s(a)L(health) : health <= 0 -> d(autophagicVirilityProduction)n

## TODO: make this persist. maybe there is potential here.
## d is an autophagic organ which pumps out negative virility, to encourage this branch to die
#symbols d
d(x) -> a(0, 0, -x * simSpeed)

## o is an autophagic switch which will kill off a branch
## o looks for a decreasing virility gradient from the root towards the leaves
#symbols o

## r(a, b, c, d, e, virilityRa, f)r(g, h, i, j, k, virilityRb, l) < o(deathAmt) > [r(m, n, o, p, q, virilityLa, r)][r(s, t, u, v, w, virilityLb, x)] : virilityRa > virilityRb && virilityRb > virilityLa && virilityRb > virilityLb && deathAmt < 10 -> o(deathAmt + 1)
## r(a, b, c, d, e, virilityRa, f)r(g, h, i, j, k, virilityRb, l) < o(deathAmt) > [r(m, n, o, p, q, virilityLa, r)][r(s, t, u, v, w, virilityLb, x)] : virilityRa > virilityRb && virilityRb > virilityLa && virilityRb > virilityLb && deathAmt >= 10 -> n










